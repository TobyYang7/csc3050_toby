$date
	Sat Nov 25 16:58:53 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_alu $end
$var wire 32 ! result [31:0] $end
$var wire 3 " flags [2:0] $end
$var reg 16 # immediate [15:0] $end
$var reg 32 $ instruction [31:0] $end
$var reg 32 % regA [31:0] $end
$var reg 32 & regB [31:0] $end
$scope module test $end
$var wire 32 ' instruction [31:0] $end
$var wire 32 ( regA [31:0] $end
$var wire 32 ) regB [31:0] $end
$var wire 6 * opcode [5:0] $end
$var reg 32 + extended_immediate [31:0] $end
$var reg 3 , flags [2:0] $end
$var reg 6 - funct [5:0] $end
$var reg 16 . immediate [15:0] $end
$var reg 1 / negative $end
$var reg 1 0 overflow $end
$var reg 5 1 rd [4:0] $end
$var reg 32 2 result [31:0] $end
$var reg 5 3 rs [4:0] $end
$var reg 32 4 rs_reg [31:0] $end
$var reg 5 5 rt [4:0] $end
$var reg 32 6 rt_reg [31:0] $end
$var reg 5 7 shamt [4:0] $end
$var reg 32 8 temp_reg [31:0] $end
$var reg 1 9 zero $end
$scope task update_flags $end
$var reg 6 : funct [5:0] $end
$var reg 1 ; negative_flag $end
$var reg 6 < opcode [5:0] $end
$var reg 1 = overflow_flag $end
$var reg 32 > regA [31:0] $end
$var reg 32 ? regB [31:0] $end
$var reg 32 @ result [31:0] $end
$var reg 1 A zero_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0A
b10000000000000000000000000000000 @
b1 ?
b1111111111111111111111111111111 >
1=
b0 <
0;
b100000 :
09
b10000000000000000000000000000000 8
b0 7
b1 6
b0 5
b1111111111111111111111111111111 4
b0 3
b10000000000000000000000000000000 2
b0 1
10
0/
b100000 .
b100000 -
b1 ,
bx +
b0 *
b1 )
b1111111111111111111111111111111 (
b100000 '
b1 &
b1111111111111111111111111111111 %
b100000 $
bx #
b1 "
b10000000000000000000000000000000 !
$end
#20000
b1 +
1=
b1 :
b1000 <
10
b1 .
b1 -
b1000 *
b100000000000000000000000000001 $
b100000000000000000000000000001 '
b1 #
#40000
b0 "
b0 ,
b10000000000000000000000000000001 !
b10000000000000000000000000000001 2
0=
b1111111111111111111111111111111 ?
b10 >
b10000000000000000000000000000001 @
b100001 :
b0 <
b10000000000000000000000000000001 8
00
b1111111111111111111111111111111 6
b10 4
b100001 .
b100001 -
b0 *
b1111111111111111111111111111111 &
b1111111111111111111111111111111 )
b10 %
b10 (
b100001 $
b100001 '
#60000
b10000000000000001111111111111110 !
b10000000000000001111111111111110 2
b1111111111111111111111111111111 >
b10000000000000001111111111111110 @
b111111 :
b1001 <
b10000000000000001111111111111110 8
b1111111111111111111111111111111 4
b1111111111111111 .
b11111 7
b11111 1
b111111 -
b1001 *
b1111111111111111111111111111111 %
b1111111111111111111111111111111 (
b100100000000001111111111111111 $
b100100000000001111111111111111 '
b1111111111111111 #
#80000
b1 "
b1 ,
b1 !
b1 2
10
1=
b11111111111111111111111111100001 ?
b11111111111111111111111111100010 >
b1 @
b100010 :
b0 <
b1 8
b11111111111111111111111111100001 6
b11111111111111111111111111100010 4
b100010 .
b0 7
b0 1
b100010 -
b0 *
b11111111111111111111111111100001 &
b11111111111111111111111111100001 )
b11111111111111111111111111100010 %
b11111111111111111111111111100010 (
b100010 $
b100010 '
#100000
b0 "
b0 ,
0=
b100011 :
00
b100011 .
b100011 -
b100011 $
b100011 '
#120000
b1000 !
b1000 2
b1010 ?
b1100 >
b1000 @
b100100 :
b1000 8
b1010 6
b1100 4
b100100 .
b100100 -
b1010 &
b1010 )
b1100 %
b1100 (
b100100 $
b100100 '
#140000
b1100 !
b1100 2
b1100 @
b1100 :
b1100 <
b1100 8
b1100 .
b1100 -
b1100 *
b110000000000000000000000001100 $
b110000000000000000000000001100 '
b1100 #
#160000
b11111111111111111111111111110001 !
b11111111111111111111111111110001 2
b11111111111111111111111111110001 @
b100111 :
b0 <
b11111111111111111111111111110001 8
b100111 .
b100111 -
b0 *
b100111 $
b100111 '
b100111 #
#180000
b1110 !
b1110 2
b1110 @
b100101 :
b1110 8
b100101 .
b100101 -
b100101 $
b100101 '
#200000
b1101 !
b1101 2
b1101 @
b1101 :
b1101 <
b1101 8
b1101 .
b1101 -
b1101 *
b110100000000000000000000001101 $
b110100000000000000000000001101 '
b1101 #
#220000
b110 !
b110 2
b110 @
b100110 :
b0 <
b110 8
b100110 .
b100110 -
b0 *
b100110 $
b100110 '
#240000
b1111 !
b1111 2
b1111 @
b11 :
b1110 <
b1111 8
b11 .
b11 -
b1110 *
b111000000000000000000000000011 $
b111000000000000000000000000011 '
b11 #
#260000
b100 "
b100 ,
b0 !
b0 2
19
1A
b1010 >
b0 @
b0 :
b100 <
b0 8
b1010 4
b0 .
b0 -
b100 *
b1010 %
b1010 (
b10000000000000000000000000000 $
b10000000000000000000000000000 '
b0 #
#280000
1A
b10100 ?
b101 <
19
b10100 6
b101 *
b10100 &
b10100 )
b10100000000000000000000000000 $
b10100000000000000000000000000 '
#300000
