$date
	Tue Nov  7 09:39:14 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_alu $end
$var wire 32 ! result [31:0] $end
$var wire 3 " flags [2:0] $end
$var reg 16 # immediate [15:0] $end
$var reg 32 $ instruction [31:0] $end
$var reg 32 % regA [31:0] $end
$var reg 32 & regB [31:0] $end
$scope module test $end
$var wire 32 ' instruction [31:0] $end
$var wire 32 ( regA [31:0] $end
$var wire 32 ) regB [31:0] $end
$var wire 6 * opcode [5:0] $end
$var reg 32 + extended_immediate [31:0] $end
$var reg 3 , flags [2:0] $end
$var reg 6 - funct [5:0] $end
$var reg 16 . immediate [15:0] $end
$var reg 1 / negative $end
$var reg 1 0 overflow $end
$var reg 5 1 rd [4:0] $end
$var reg 32 2 result [31:0] $end
$var reg 5 3 rs [4:0] $end
$var reg 32 4 rs_reg [31:0] $end
$var reg 5 5 rt [4:0] $end
$var reg 32 6 rt_reg [31:0] $end
$var reg 5 7 shamt [4:0] $end
$var reg 32 8 temp_reg [31:0] $end
$var reg 1 9 zero $end
$scope task update_flags $end
$var reg 6 : funct [5:0] $end
$var reg 1 ; negative_flag $end
$var reg 6 < opcode [5:0] $end
$var reg 1 = overflow_flag $end
$var reg 32 > regA [31:0] $end
$var reg 32 ? regB [31:0] $end
$var reg 32 @ result [31:0] $end
$var reg 1 A zero_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0A
b11111111111111111111111111110001 @
b1010 ?
b1100 >
0=
b0 <
0;
b100111 :
09
b11111111111111111111111111110001 8
b0 7
b1010 6
b0 5
b1100 4
b0 3
b11111111111111111111111111110001 2
b0 1
00
0/
b100111 .
b100111 -
b0 ,
bx +
b0 *
b1010 )
b1100 (
b100111 '
b1010 &
b1100 %
b100111 $
b100111 #
b0 "
b11111111111111111111111111110001 !
$end
#20000
