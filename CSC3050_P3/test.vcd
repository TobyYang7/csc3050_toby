$date
	Tue Dec 12 23:44:33 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_alu $end
$var wire 32 ! result [31:0] $end
$var wire 3 " flags [2:0] $end
$var reg 16 # immediate [15:0] $end
$var reg 32 $ instruction [31:0] $end
$var reg 32 % regA [31:0] $end
$var reg 32 & regB [31:0] $end
$scope module test $end
$var wire 32 ' instruction [31:0] $end
$var wire 32 ( regA [31:0] $end
$var wire 32 ) regB [31:0] $end
$var wire 6 * opcode [5:0] $end
$var reg 3 + flags [2:0] $end
$var reg 6 , funct [5:0] $end
$var reg 16 - immediate [15:0] $end
$var reg 1 . negative $end
$var reg 1 / overflow $end
$var reg 5 0 rd [4:0] $end
$var reg 32 1 result [31:0] $end
$var reg 5 2 rs [4:0] $end
$var reg 32 3 rs_reg [31:0] $end
$var reg 5 4 rt [4:0] $end
$var reg 32 5 rt_reg [31:0] $end
$var reg 5 6 shamt [4:0] $end
$var reg 32 7 temp_reg [31:0] $end
$var reg 1 8 zero $end
$scope task update_flags $end
$var reg 6 9 funct [5:0] $end
$var reg 1 : negative_flag $end
$var reg 6 ; opcode [5:0] $end
$var reg 1 < overflow_flag $end
$var reg 32 = regA [31:0] $end
$var reg 32 > regB [31:0] $end
$var reg 32 ? result [31:0] $end
$var reg 1 @ zero_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0@
b11111111111111111111111111111110 ?
b1 >
b1111111111111111111111111111111 =
1<
b0 ;
0:
b100000 9
08
b11111111111111111111111111111110 7
b0 6
b1111111111111111111111111111111 5
b0 4
b1111111111111111111111111111111 3
b0 2
b11111111111111111111111111111110 1
b0 0
1/
0.
b100000 -
b100000 ,
b1 +
b0 *
b1 )
b1111111111111111111111111111111 (
b100000 '
b1 &
b1111111111111111111111111111111 %
b100000 $
bx #
b1 "
b11111111111111111111111111111110 !
$end
#20000
b0x "
b0x +
b10000000000000000000000000000000 !
b10000000000000000000000000000000 1
x<
b10000000000000000000000000000000 ?
b1 9
b1000 ;
b10000000000000000000000000000000 7
x/
b1 -
b1 ,
b1000 *
b100000000000000000000000000001 $
b100000000000000000000000000001 '
b1 #
#40000
b0 "
b0 +
b100 !
b100 1
0<
b1111111111111111111111111111111 >
b10 =
b100 ?
b100001 9
b0 ;
b100 7
0/
b10 5
b10 3
b100001 -
b100001 ,
b0 *
b1111111111111111111111111111111 &
b1111111111111111111111111111111 )
b10 %
b10 (
b100001 $
b100001 '
#60000
b10000000000000001111111111111110 !
b10000000000000001111111111111110 1
b1111111111111111111111111111111 =
b10000000000000001111111111111110 ?
b111111 9
b1001 ;
b10000000000000001111111111111110 7
b1111111111111111111111111111111 5
b1111111111111111111111111111111 3
b1111111111111111 -
b11111 6
b11111 0
b111111 ,
b1001 *
b1111111111111111111111111111111 %
b1111111111111111111111111111111 (
b100100000000001111111111111111 $
b100100000000001111111111111111 '
b1111111111111111 #
#80000
b0 !
b0 1
b11111111111111111111111111100001 >
b11111111111111111111111111100010 =
b0 ?
b100010 9
b0 ;
b0 7
b11111111111111111111111111100010 5
b11111111111111111111111111100010 3
b100010 -
b0 6
b0 0
b100010 ,
b0 *
b11111111111111111111111111100001 &
b11111111111111111111111111100001 )
b11111111111111111111111111100010 %
b11111111111111111111111111100010 (
b100010 $
b100010 '
#100000
b100011 9
b100011 -
b100011 ,
b100011 $
b100011 '
#120000
b1100 !
b1100 1
b1010 >
b1100 =
b1100 ?
b100100 9
b1100 7
b1100 5
b1100 3
b100100 -
b100100 ,
b1010 &
b1010 )
b1100 %
b1100 (
b100100 $
b100100 '
#140000
b1100 9
b1100 ;
b1100 -
b1100 ,
b1100 *
b110000000000000000000000001100 $
b110000000000000000000000001100 '
b1100 #
#160000
b11111111111111111111111111110011 !
b11111111111111111111111111110011 1
b11111111111111111111111111110011 ?
b100111 9
b0 ;
b11111111111111111111111111110011 7
b100111 -
b100111 ,
b0 *
b100111 $
b100111 '
b100111 #
#180000
b1100 !
b1100 1
b1100 ?
b100101 9
b1100 7
b100101 -
b100101 ,
b100101 $
b100101 '
#200000
b1101 !
b1101 1
b1101 ?
b1101 9
b1101 ;
b1101 7
b1101 -
b1101 ,
b1101 *
b110100000000000000000000001101 $
b110100000000000000000000001101 '
b1101 #
#220000
b0 !
b0 1
b0 ?
b100110 9
b0 ;
b0 7
b100110 -
b100110 ,
b0 *
b100110 $
b100110 '
#240000
b1111 !
b1111 1
b1111 ?
b11 9
b1110 ;
b1111 7
b11 -
b11 ,
b1110 *
b111000000000000000000000000011 $
b111000000000000000000000000011 '
b11 #
#260000
b100 "
b100 +
b0 !
b0 1
18
1@
b1010 =
b0 ?
b0 9
b100 ;
b0 7
b1010 5
b1010 3
b0 -
b0 ,
b100 *
b1010 %
b1010 (
b10000000000000000000000000000 $
b10000000000000000000000000000 '
b0 #
#280000
1@
b10100 >
b101 ;
18
b101 *
b10100 &
b10100 )
b10100000000000000000000000000 $
b10100000000000000000000000000 '
#300000
b0 "
b0 +
0@
b101010 9
b0 ;
08
b101010 -
b101010 ,
b0 *
b101010 $
b101010 '
#320000
b0 >
b101 =
b10 9
b1010 ;
b101 5
b101 3
b10 -
b10 ,
b1010 *
b0 &
b0 )
b101 %
b101 (
b101000000000000000000000000010 $
b101000000000000000000000000010 '
#340000
b10100 =
b1011 ;
b10100 5
b10100 3
b1011 *
b10100 %
b10100 (
b101100000000000000000000000010 $
b101100000000000000000000000010 '
#360000
b10100 >
b1010 =
b101011 9
b0 ;
b1010 5
b1010 3
b101011 -
b101011 ,
b0 *
b10100 &
b10100 )
b1010 %
b1010 (
b101011 $
b101011 '
#380000
b10 !
b10 1
b0 >
b0 =
b10 ?
b10 9
b100011 ;
b10 7
b0 5
b0 3
b10 -
b10 ,
b100011 *
b0 &
b0 )
b0 %
b0 (
b10001100000000000000000000000010 $
b10001100000000000000000000000010 '
#400000
b1010 >
b101011 ;
b101011 *
b1010 &
b1010 )
b10101100000000000000000000000010 $
b10101100000000000000000000000010 '
#420000
b101 !
b101 1
b0 >
b101 =
b101 ?
b0 9
b0 ;
b101 7
b101 5
b101 3
b101000000000000 -
b1010 0
b0 ,
b0 *
b0 &
b0 )
b101 %
b101 (
b101000000000000 $
b101000000000000 '
#440000
b100000000000 !
b100000000000 1
b1000 =
b100000000000 ?
b100 9
b100000000000 7
b1000 5
b1000 3
b1000000000100 -
b10 0
b100 ,
b1000 %
b1000 (
b1000000000100 $
b1000000000100 '
#460000
b10000000000 !
b10000000000 1
b10000000000 =
b10000000000 ?
b10 9
b10000000000 7
b10000000000 5
b10000000000 3
b101000000000010 -
b1010 0
b10 ,
b10000000000 %
b10000000000 (
b101000000000010 $
b101000000000010 '
#480000
b0 !
b0 1
b0 ?
b110 9
b0 7
b1000000000110 -
b10 0
b110 ,
b1000000000110 $
b1000000000110 '
#500000
b11110000000000000000000000000000 !
b11110000000000000000000000000000 1
b11110000000000000000000000000000 =
b11110000000000000000000000000000 ?
b11 9
b11110000000000000000000000000000 7
b11110000000000000000000000000000 5
b11110000000000000000000000000000 3
b101000000000011 -
b1010 0
b11 ,
b11110000000000000000000000000000 %
b11110000000000000000000000000000 (
b101000000000011 $
b101000000000011 '
#520000
b11111111111111111111111111111111 !
b11111111111111111111111111111111 1
b11111111111111111111111111111111 ?
b111 9
b11111111111111111111111111111111 7
b1000000000111 -
b10 0
b111 ,
b1000000000111 $
b1000000000111 '
#540000
