$date
	Tue Nov  7 10:16:05 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_alu $end
$var wire 32 ! result [31:0] $end
$var wire 3 " flags [2:0] $end
$var reg 32 # instruction [31:0] $end
$var reg 32 $ regA [31:0] $end
$var reg 32 % regB [31:0] $end
$scope module test $end
$var wire 32 & instruction [31:0] $end
$var wire 32 ' regA [31:0] $end
$var wire 32 ( regB [31:0] $end
$var wire 6 ) opcode [5:0] $end
$var reg 32 * extended_immediate [31:0] $end
$var reg 3 + flags [2:0] $end
$var reg 6 , funct [5:0] $end
$var reg 16 - immediate [15:0] $end
$var reg 1 . negative $end
$var reg 1 / overflow $end
$var reg 5 0 rd [4:0] $end
$var reg 32 1 result [31:0] $end
$var reg 5 2 rs [4:0] $end
$var reg 32 3 rs_reg [31:0] $end
$var reg 5 4 rt [4:0] $end
$var reg 32 5 rt_reg [31:0] $end
$var reg 5 6 shamt [4:0] $end
$var reg 32 7 temp_reg [31:0] $end
$var reg 1 8 zero $end
$scope task update_flags $end
$var reg 6 9 funct [5:0] $end
$var reg 1 : negative_flag $end
$var reg 6 ; opcode [5:0] $end
$var reg 1 < overflow_flag $end
$var reg 32 = regA [31:0] $end
$var reg 32 > regB [31:0] $end
$var reg 32 ? result [31:0] $end
$var reg 1 @ zero_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0@
b10 ?
b0 >
b0 =
0<
b100011 ;
0:
b10 9
08
b10 7
b0 6
b0 5
b0 4
b0 3
b0 2
b10 1
b0 0
0/
0.
b10 -
b10 ,
b0 +
bx *
b100011 )
b0 (
b0 '
b10001100000000000000000000000010 &
b0 %
b0 $
b10001100000000000000000000000010 #
b0 "
b10 !
$end
#20000
b1010 >
b101011 ;
b1010 5
b101011 )
b1010 %
b1010 (
b10101100000000000000000000000010 #
b10101100000000000000000000000010 &
#40000
