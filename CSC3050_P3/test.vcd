$date
	Tue Nov  7 00:29:39 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_alu $end
$var wire 32 ! result [31:0] $end
$var wire 3 " flags [2:0] $end
$var reg 32 # instruction [31:0] $end
$var reg 32 $ regA [31:0] $end
$var reg 32 % regB [31:0] $end
$scope module test $end
$var wire 32 & instruction [31:0] $end
$var wire 32 ' regA [31:0] $end
$var wire 32 ( regB [31:0] $end
$var wire 6 ) opcode [5:0] $end
$var reg 3 * flags [2:0] $end
$var reg 6 + funct [5:0] $end
$var reg 16 , immediate [15:0] $end
$var reg 1 - negative $end
$var reg 1 . overflow $end
$var reg 5 / rd [4:0] $end
$var reg 32 0 result [31:0] $end
$var reg 5 1 rs [4:0] $end
$var reg 32 2 rs_reg [31:0] $end
$var reg 5 3 rt [4:0] $end
$var reg 32 4 rt_reg [31:0] $end
$var reg 5 5 shamt [4:0] $end
$var reg 32 6 temp_reg [31:0] $end
$var reg 1 7 zero $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
07
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
0.
0-
b100000 ,
b100000 +
b0 *
b0 )
b10100 (
b1010 '
b100000 &
b10100 %
b1010 $
b100000 #
b0 "
b0 !
$end
#20000
b101 !
b101 0
b101 6
b101 ,
b101 +
b1000 )
b0 %
b0 (
b1111 $
b1111 '
b100000000000000000000000000101 #
b100000000000000000000000000101 &
#40000
b0 !
b0 0
b0 6
b100001 ,
b100001 +
b0 )
b11111111111111111111111111111110 %
b11111111111111111111111111111110 (
b1 $
b1 '
b100001 #
b100001 &
#60000
b1111111111111111 ,
b11111 5
b11111 /
b111111 +
b1001 )
b1111111111111111111111111111111 $
b1111111111111111111111111111111 '
b100100000000001111111111111111 #
b100100000000001111111111111111 &
#80000
