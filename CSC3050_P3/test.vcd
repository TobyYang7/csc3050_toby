$date
	Tue Nov  7 02:07:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_alu $end
$var wire 32 ! result [31:0] $end
$var wire 3 " flags [2:0] $end
$var reg 32 # instruction [31:0] $end
$var reg 32 $ regA [31:0] $end
$var reg 32 % regB [31:0] $end
$scope module test $end
$var wire 32 & instruction [31:0] $end
$var wire 32 ' regA [31:0] $end
$var wire 32 ( regB [31:0] $end
$var wire 6 ) opcode [5:0] $end
$var reg 3 * flags [2:0] $end
$var reg 6 + funct [5:0] $end
$var reg 16 , immediate [15:0] $end
$var reg 1 - negative $end
$var reg 1 . overflow $end
$var reg 5 / rd [4:0] $end
$var reg 32 0 result [31:0] $end
$var reg 5 1 rs [4:0] $end
$var reg 32 2 rs_reg [31:0] $end
$var reg 5 3 rt [4:0] $end
$var reg 32 4 rt_reg [31:0] $end
$var reg 5 5 shamt [4:0] $end
$var reg 32 6 temp_reg [31:0] $end
$var reg 1 7 zero $end
$scope task update_flags $end
$var reg 6 8 funct [5:0] $end
$var reg 1 9 negative_flag $end
$var reg 6 : opcode [5:0] $end
$var reg 1 ; overflow_flag $end
$var reg 32 < regA [31:0] $end
$var reg 32 = regB [31:0] $end
$var reg 32 > result [31:0] $end
$var reg 1 ? zero_flag $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0?
b1111111111111111111111111111110 >
b11111111111111111111111111111111 =
b1111111111111111111111111111111 <
0;
b0 :
09
b100000 8
07
b1111111111111111111111111111110 6
b0 5
b11111111111111111111111111111111 4
b0 3
b1111111111111111111111111111111 2
b0 1
b1111111111111111111111111111110 0
b0 /
0.
0-
b100000 ,
b100000 +
b0 *
b0 )
b11111111111111111111111111111111 (
b1111111111111111111111111111111 '
b100000 &
b11111111111111111111111111111111 %
b1111111111111111111111111111111 $
b100000 #
b0 "
b1111111111111111111111111111110 !
$end
#20000
b10100 !
b10100 0
b0 =
b1111 <
b10100 >
b101 8
b1000 :
b10100 6
b1111 2
b101 ,
b101 +
b1000 )
b0 %
b0 (
b1111 $
b1111 '
b100000000000000000000000000101 #
b100000000000000000000000000101 &
#40000
b11111111111111111111111111111111 !
b11111111111111111111111111111111 0
b11111111111111111111111111111110 =
b1 <
b11111111111111111111111111111111 >
b100001 8
b0 :
b11111111111111111111111111111111 6
b11111111111111111111111111111110 4
b1 2
b100001 ,
b100001 +
b0 )
b11111111111111111111111111111110 %
b11111111111111111111111111111110 (
b1 $
b1 '
b100001 #
b100001 &
#60000
b10000000000000001111111111111110 !
b10000000000000001111111111111110 0
b1111111111111111111111111111111 <
b10000000000000001111111111111110 >
b111111 8
b1001 :
b10000000000000001111111111111110 6
b1111111111111111111111111111111 2
b1111111111111111 ,
b11111 5
b11111 /
b111111 +
b1001 )
b1111111111111111111111111111111 $
b1111111111111111111111111111111 '
b100100000000001111111111111111 #
b100100000000001111111111111111 &
#80000
b111100 !
b111100 0
b11111111111111111111111111100010 =
b11110 <
b111100 >
b100010 8
b0 :
b111100 6
b11111111111111111111111111100010 4
b11110 2
b100010 ,
b0 5
b0 /
b100010 +
b0 )
b11111111111111111111111111100010 %
b11111111111111111111111111100010 (
b11110 $
b11110 '
b100010 #
b100010 &
#100000
b11111111111111111111111111110110 !
b11111111111111111111111111110110 0
b10100 =
b1010 <
b11111111111111111111111111110110 >
b100011 8
b11111111111111111111111111110110 6
b10100 4
b1010 2
b100011 ,
b100011 +
b10100 %
b10100 (
b1010 $
b1010 '
b100011 #
b100011 &
#120000
b1000 !
b1000 0
b1010 =
b1100 <
b1000 >
b100100 8
b1000 6
b1010 4
b1100 2
b100100 ,
b100100 +
b1010 %
b1010 (
b1100 $
b1100 '
b100100 #
b100100 &
#140000
b1100 !
b1100 0
b0 =
b1100 >
b1100 8
b1100 :
b1100 6
b1100 ,
b1100 +
b1100 )
b0 %
b0 (
b110000000000000000000000001100 #
b110000000000000000000000001100 &
#160000
b11111111111111111111111111110001 !
b11111111111111111111111111110001 0
b1010 =
b11111111111111111111111111110001 >
b100111 8
b0 :
b11111111111111111111111111110001 6
b100111 ,
b100111 +
b0 )
b1010 %
b1010 (
b100111 #
b100111 &
#180000
b1110 !
b1110 0
b1110 >
b100101 8
b1110 6
b100101 ,
b100101 +
b100101 #
b100101 &
#200000
b1100 !
b1100 0
b0 =
b1100 >
b1100 8
b1101 :
b1100 6
b1100 ,
b1100 +
b1101 )
b0 %
b0 (
b110100000000000000000000001100 #
b110100000000000000000000001100 &
#220000
b110 !
b110 0
b1010 =
b110 >
b100110 8
b0 :
b110 6
b100110 ,
b100110 +
b0 )
b1010 %
b1010 (
b100110 #
b100110 &
#240000
b0 !
b0 0
b0 =
b0 >
b1100 8
b1110 :
b0 6
b1100 ,
b1100 +
b1110 )
b0 %
b0 (
b111000000000000000000000001100 #
b111000000000000000000000001100 &
#260000
b10 !
b10 0
b1010 =
b1010 <
b10 >
b10 8
b100 :
b10 6
b1010 2
b10 ,
b10 +
b100 )
b1010 %
b1010 (
b1010 $
b1010 '
b10000000000000000000000000010 #
b10000000000000000000000000010 &
#280000
b10100 =
b101 :
b10100 4
b101 )
b10100 %
b10100 (
b10100000000000000000000000010 #
b10100000000000000000000000010 &
#300000
b1 !
b1 0
b1 >
b101010 8
b0 :
b1 6
b101010 ,
b101010 +
b0 )
b101010 #
b101010 &
#320000
b0 !
b0 0
b0 =
b101 <
b0 >
b10 8
b1010 :
b0 6
b101 2
b10 ,
b10 +
b1010 )
b0 %
b0 (
b101 $
b101 '
b101000000000000000000000000010 #
b101000000000000000000000000010 &
#340000
b10100 <
b1011 :
b10100 2
b1011 )
b10100 $
b10100 '
b101100000000000000000000000010 #
b101100000000000000000000000010 &
#360000
b1 !
b1 0
b10100 =
b1010 <
b1 >
b101011 8
b0 :
b1 6
b1010 2
b101011 ,
b101011 +
b0 )
b10100 %
b10100 (
b1010 $
b1010 '
b101011 #
b101011 &
#380000
b0 =
b0 <
b10 8
b100011 :
b10 ,
b10 +
b100011 )
b0 %
b0 (
b0 $
b0 '
b10001100000000000000000000000010 #
b10001100000000000000000000000010 &
#400000
b1010 =
b101011 :
b101011 )
b1010 %
b1010 (
b10101100000000000000000000000010 #
b10101100000000000000000000000010 &
#420000
b0 =
b101 <
b0 8
b0 :
b101000000000000 ,
b1010 /
b0 +
b0 )
b0 %
b0 (
b101 $
b101 '
b101000000000000 #
b101000000000000 &
#440000
b1000 <
b100 8
b1000000000100 ,
b10 /
b100 +
b1000 $
b1000 '
b1000000000100 #
b1000000000100 &
#460000
b10000000000 <
b10 8
b101000000000010 ,
b1010 /
b10 +
b10000000000 $
b10000000000 '
b101000000000010 #
b101000000000010 &
#480000
b110 8
b1000000000110 ,
b10 /
b110 +
b1000000000110 #
b1000000000110 &
#500000
b11110000000000000000000000000000 <
b11 8
b101000000000011 ,
b1010 /
b11 +
b11110000000000000000000000000000 $
b11110000000000000000000000000000 '
b101000000000011 #
b101000000000011 &
#520000
b111 8
b1000000000111 ,
b10 /
b111 +
b1000000000111 #
b1000000000111 &
#540000
